% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/GproReg.R
\name{gaussian_process_reg}
\alias{gaussian_process_reg}
\title{Gaussian Process Regression for Demand Estimation}
\usage{
gaussian_process_reg(
  data,
  class = "DE",
  kernel = "rbfdot",
  plot = FALSE,
  sigma = 100
)
}
\arguments{
\item{data}{A data frame containing the variables of interest.}

\item{class}{A character string specifying the column name of the dependent variable.}

\item{kernel}{A character string specifying the kernel function to use in the GPR model.
Default is "rbfdot", which indicates a radial basis function kernel.}

\item{plot}{Logical; if TRUE, a plot of the GPR predictions versus actual data will be displayed.}

\item{sigma}{Numeric; the sigma parameter for the kernel function, controlling the width of the kernel.
Default value is 100.}
}
\value{
A list containing:
\itemize{
  \item \code{model}: The trained GPR model object.
  \item \code{data}: The input data frame with an additional column for the mean predictions.
  \item \code{performance}: A list with performance metrics including RMSE, R squared, etc.
  \item \code{plot}: An optional ggplot object visualizing the actual data and the GPR predictions.
}
}
\description{
This function applies Gaussian Process Regression (GPR) using the \code{kernlab::gausspr} function
to model and predict the specified class variable based on a subset of predictor variables from the dataset.
It splits the data into training and test sets, trains the GPR model, evaluates its performance,
and optionally generates a plot of the predictions.
}
\examples{
\dontrun{
data <- data.frame(toy = seq(as.Date("2020-01-01"), by = "day", length.out = 100),
                   temp = rnorm(100, mean = 15, sd = 5),
                   DE = rnorm(100, mean = 200, sd = 20))
gpr_results <- gaussian_process_reg(data,
                                    class = "DE",
                                    kernel = "rbfdot",
                                    plot = TRUE,
                                    sigma = 50)
}

}
