% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/RcppExports.R
\name{RidgeRegPar}
\alias{RidgeRegPar}
\title{Parallel Ridge Regression with Intercept}
\usage{
RidgeRegPar(X, y, lambda)
}
\arguments{
\item{X}{A numeric matrix of predictor variables, where each row represents an 
observation and each column a predictor.}

\item{y}{A numeric vector of the response variable corresponding to each observation.}

\item{lambda}{A double specifying the strength of the regularization (lambda >= 0).}
}
\value{
An R list containing:
\itemize{
  \item \code{error}: The mean squared error of the model residuals.
  \item \code{coefficients}: A numeric vector of the estimated coefficients, including the intercept.
}
}
\description{
Computes the coefficients of a ridge regression model using parallel computing
to handle the matrix multiplications. The function includes an intercept in the
model by appending a column of ones to the matrix `X`. It uses parallelization
to efficiently compute the cross-product matrix `X'X`, and it applies ridge
regularization by adding a lambda penalty to the diagonal elements of the matrix,
except for the intercept term.
}
\details{
The function utilizes the `RcppParallel` package for parallel processing. It employs
the `MatrixMultiplier` worker class to perform the multiplication of `X'X` in parallel,
speeding up the computation significantly, especially for large datasets. The intercept
is not regularized, consistent with standard ridge regression practices.
}
\examples{
\dontrun{
library(Rcpp)
library(RcppParallel)
sourceCpp("path/to/RidgeRegPar.cpp") // Ensure this path points to the file containing the function

# Simulate some data
set.seed(123)
X <- matrix(rnorm(100 * 10), ncol = 10)
y <- X \%*\% rnorm(10) + rnorm(100)
lambda <- 0.5

# Perform parallel ridge regression
results <- RidgeRegPar(X, y, lambda)
print(results$error)
print(results$coefficients)
}

}
