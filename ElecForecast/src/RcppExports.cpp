// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// generate_fourier_terms
NumericMatrix generate_fourier_terms(NumericVector time_counter, int K, double period);
RcppExport SEXP _ElecForecast_generate_fourier_terms(SEXP time_counterSEXP, SEXP KSEXP, SEXP periodSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type time_counter(time_counterSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< double >::type period(periodSEXP);
    rcpp_result_gen = Rcpp::wrap(generate_fourier_terms(time_counter, K, period));
    return rcpp_result_gen;
END_RCPP
}
// performRidgeRegression
List performRidgeRegression(const arma::mat& X, const arma::vec& y, double lambda);
RcppExport SEXP _ElecForecast_performRidgeRegression(SEXP XSEXP, SEXP ySEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(performRidgeRegression(X, y, lambda));
    return rcpp_result_gen;
END_RCPP
}
// parallelRidgeCV
List parallelRidgeCV(const arma::mat& X, const arma::vec& y, const std::vector<double>& lambda_values);
RcppExport SEXP _ElecForecast_parallelRidgeCV(SEXP XSEXP, SEXP ySEXP, SEXP lambda_valuesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type lambda_values(lambda_valuesSEXP);
    rcpp_result_gen = Rcpp::wrap(parallelRidgeCV(X, y, lambda_values));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_ElecForecast_generate_fourier_terms", (DL_FUNC) &_ElecForecast_generate_fourier_terms, 3},
    {"_ElecForecast_performRidgeRegression", (DL_FUNC) &_ElecForecast_performRidgeRegression, 3},
    {"_ElecForecast_parallelRidgeCV", (DL_FUNC) &_ElecForecast_parallelRidgeCV, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_ElecForecast(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
