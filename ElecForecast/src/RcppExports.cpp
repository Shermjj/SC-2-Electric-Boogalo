// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// generate_fourier_terms
NumericMatrix generate_fourier_terms(NumericVector time_counter, int K, double period);
RcppExport SEXP _ElecForecast_generate_fourier_terms(SEXP time_counterSEXP, SEXP KSEXP, SEXP periodSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type time_counter(time_counterSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< double >::type period(periodSEXP);
    rcpp_result_gen = Rcpp::wrap(generate_fourier_terms(time_counter, K, period));
    return rcpp_result_gen;
END_RCPP
}
// parallel_ridge_cross_validation
NumericVector parallel_ridge_cross_validation(NumericMatrix x_vars, NumericVector y_var, NumericVector time, double daily_period, double annual_period, int max_K, int n_folds, double alpha);
RcppExport SEXP _ElecForecast_parallel_ridge_cross_validation(SEXP x_varsSEXP, SEXP y_varSEXP, SEXP timeSEXP, SEXP daily_periodSEXP, SEXP annual_periodSEXP, SEXP max_KSEXP, SEXP n_foldsSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x_vars(x_varsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y_var(y_varSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type time(timeSEXP);
    Rcpp::traits::input_parameter< double >::type daily_period(daily_periodSEXP);
    Rcpp::traits::input_parameter< double >::type annual_period(annual_periodSEXP);
    Rcpp::traits::input_parameter< int >::type max_K(max_KSEXP);
    Rcpp::traits::input_parameter< int >::type n_folds(n_foldsSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(parallel_ridge_cross_validation(x_vars, y_var, time, daily_period, annual_period, max_K, n_folds, alpha));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_hello_world
List rcpp_hello_world();
RcppExport SEXP _ElecForecast_rcpp_hello_world() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(rcpp_hello_world());
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_ElecForecast_generate_fourier_terms", (DL_FUNC) &_ElecForecast_generate_fourier_terms, 3},
    {"_ElecForecast_parallel_ridge_cross_validation", (DL_FUNC) &_ElecForecast_parallel_ridge_cross_validation, 8},
    {"_ElecForecast_rcpp_hello_world", (DL_FUNC) &_ElecForecast_rcpp_hello_world, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_ElecForecast(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
